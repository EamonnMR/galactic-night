[gd_scene load_steps=17 format=2]

[ext_resource path="res://assets/nimbus/nimbus_C.png" type="Texture2D" id=1]
[ext_resource path="res://Spaceship.gd" type="Script" id=2]
[ext_resource path="res://AIController.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/nimbus/nimbus_RM.png" type="Texture2D" id=4]
[ext_resource path="res://Weapon.tscn" type="PackedScene" id=5]
[ext_resource path="res://MeshInstance.gd" type="Script" id=6]
[ext_resource path="res://asset_sources/nimbus.obj" type="ArrayMesh" id=7]
[ext_resource path="res://assets/nimbus/nimbus_C_paint.png" type="Texture2D" id=8]
[ext_resource path="res://DirectionalLight.gd" type="Script" id=9]
[ext_resource path="res://assets/nimbus/nimbus_N.png" type="Texture2D" id=10]
[ext_resource path="res://assets/nimbus/nimbus_E_base.png" type="Texture2D" id=11]
[ext_resource path="res://assets/nimbus/nimbus_E_weapon.png" type="Texture2D" id=12]
[ext_resource path="res://assets/nimbus/nimbus_E_engine.png" type="Texture2D" id=13]

[sub_resource type="ConvexPolygonShape3D" id=1]
points = PackedVector3Array( -0.22999, -0.0709796, -0.673112, -0.22999, -0.178905, -0.640432, -0.568929, -0.0836513, -0.520647, -0.568929, -0.069019, -0.521306, -0.22999, 0.0486133, -0.636874, 0.245449, -0.0709796, -0.673112, -0.22999, -0.258187, -0.54384, -0.568929, -0.108134, -0.498377, -0.568929, -0.096084, -0.513004, 0.245449, -0.178905, -0.640432, -0.748809, -0.0151281, -0.0432225, -0.748809, -1.76132e-05, -0.0469122, -0.748809, 0.0150451, -0.0432225, -0.568929, -0.0508482, -0.515771, -0.543335, -0.0421453, -0.524469, -0.543335, -0.0249786, -0.510369, -0.228978, 0.117328, -0.55056, -0.0739688, 0.111829, -0.613154, 0.0892826, 0.111829, -0.613154, 0.311964, 0.0464615, -0.636346, 0.728407, -0.0656239, -0.520911, 0.728407, -0.0832688, -0.519461, -0.228978, -0.267273, -0.433807, -0.543335, -0.126688, -0.479533, -0.543335, -0.120232, -0.500749, 0.311964, -0.256035, -0.544499, 0.0892826, -0.297494, -0.488889, -0.0739688, -0.297494, -0.488889, -0.568929, -0.113681, -0.480192, -0.748809, -0.0414758, -0.0168673, -0.748809, -0.030908, -0.0326804, 0.728407, -0.0987618, -0.510896, -0.748809, 0.0308729, -0.0326804, -0.568929, -0.036168, -0.503648, -0.568929, -0.0271783, -0.486912, -0.543335, -0.0145065, -0.490866, -0.72336, 0.0540646, -0.0200299, -0.655543, 0.0783561, -0.0296496, -0.0729566, 0.180591, -0.526709, 0.0904394, 0.180591, -0.526709, 0.246461, 0.117328, -0.55056, 0.728407, -0.0324861, -0.503253, 0.728407, -0.0473096, -0.515376, -0.228978, -0.267273, 0.433675, -0.72336, -0.0584512, -0.000131726, -0.0729566, -0.306579, -0.378856, 0.728407, -0.110908, -0.496137, 0.728407, -0.116455, -0.477688, 0.311964, -0.256035, 0.544367, 0.0904394, -0.306579, -0.378856, -0.748809, -0.0451578, -0.000131726, -0.748809, 0.0413928, -0.0168673, -0.748809, 0.0451226, -0.000131726, -0.72336, 0.0583682, -0.000131726, -0.655543, 0.0845725, -0.000131726, -0.0729566, 0.18193, -0.504966, -0.453395, 0.136838, -0.0233243, -0.453395, 0.139515, -0.000131726, 0.0904394, 0.18193, -0.504966, 0.728407, -0.0215357, -0.467278, 0.728407, -0.0234484, -0.486385, -0.22999, -0.258187, 0.543708, -0.543335, -0.126688, 0.479401, -0.0729566, -0.306579, 0.378724, -0.568929, -0.113681, 0.48006, 0.728407, -0.116455, 0.477557, 0.0892826, -0.297494, 0.488757, 0.0904394, -0.306579, 0.378724, 0.728407, -0.110908, 0.496005, 0.728407, -0.0987618, 0.510764, 0.245449, -0.178905, 0.6403, -0.748809, -0.0414758, 0.0167356, -0.748809, 0.0413928, 0.0167356, -0.72336, 0.0540646, 0.0198982, -0.655543, 0.0783561, 0.0295179, -0.453395, 0.136838, 0.0231926, -0.0729566, 0.180591, 0.526577, -0.0729566, 0.18193, 0.504834, 0.0904394, 0.18193, 0.504834, 0.728407, -0.0215357, 0.467146, -0.22999, -0.178905, 0.6403, -0.568929, -0.108134, 0.498245, -0.543335, -0.120232, 0.500617, -0.0739688, -0.297494, 0.488757, 0.728407, -0.0832688, 0.519329, 0.245449, -0.0709796, 0.67298, -0.748809, -0.030908, 0.0325488, -0.748809, 0.0308729, 0.0325488, -0.568929, -0.036168, 0.503516, -0.568929, -0.0271783, 0.486781, -0.543335, -0.0145065, 0.490734, -0.228978, 0.117328, 0.550429, -0.0739688, 0.111829, 0.613022, 0.0904394, 0.180591, 0.526577, 0.728407, -0.0234484, 0.486254, -0.22999, -0.0709796, 0.67298, -0.568929, -0.0836513, 0.520516, -0.568929, -0.096084, 0.512872, 0.728407, -0.0656239, 0.520779, 0.311964, 0.0464615, 0.636215, -0.22999, 0.0486133, 0.636742, -0.748809, -0.0151281, 0.0430908, -0.748809, 0.0150451, 0.0430908, -0.568929, -0.0508482, 0.51564, -0.543335, -0.0249786, 0.510237, 0.0892826, 0.111829, 0.613022, 0.246461, 0.117328, 0.550429, 0.728407, -0.0324861, 0.503121, -0.568929, -0.069019, 0.521174, -0.748809, -1.76132e-05, 0.0467806, 0.728407, -0.0473096, 0.515244, -0.543335, -0.0421453, 0.524337 )

[sub_resource type="Shader" id=2]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.stable's StandardMaterial3D.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform mat4 xform;
uniform mat4 inv_xform;
uniform float perspective_correct = 0.5;

uniform sampler2D texture_base_emission : hint_default_black;
uniform sampler2D texture_engine_emission : hint_default_black;
uniform sampler2D texture_weapon_emission : hint_default_black;

uniform vec4 emission : source_color;
uniform float emission_energy;

uniform float base_emission_factor = 1;
uniform float engine_emission_factor = 1;
uniform float weapon_emission_factor=  1;

uniform sampler2D texture_paint : hint_default_black;

uniform float paint_hue: hint_range(0,1);
uniform float paint_saturation: hint_range(0,2);
uniform float paint_brightness: hint_range(-1,1);
uniform float base_brightness: hint_range(-1,1);

uniform float lights_hue: hint_range(0,1);
uniform float lights_saturation: hint_range(0,2);
uniform float lights_brightness: hint_range(0,2);
uniform float weapon_hue: hint_range(0,1);
uniform float weapon_saturation: hint_range(0,2);


// https://gamedev.stackexchange.com/a/59808
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.panel, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void vertex() {
	//https://discord.com/channels/212250894228652034/408555922349359105/988915027035693186
	
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	mat4 reflection = mat4(
		vec4(-1, 0, 0, 0),
		vec4(0, 1, 0, 0),
		vec4(0, 0, -1, 0),
		vec4(0, 0, 0, 1)
	);
	
	mat4 projection = mat4(
		vec4(1,0,0,0),
		vec4(0,1,0,0),
		vec4(0,0,1,-perspective_correct),
		vec4(0,0,0,1)
	);
	vec4 tmpvertex = vec4(VERTEX, 1);
	
	tmpvertex = 
		inv_xform *
		projection *
		xform *
		reflection *
		tmpvertex;
	
	VERTEX = tmpvertex.xyz / tmpvertex.w;
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	vec4 paint_tex = texture(texture_paint,base_uv);
	if (paint_tex.a > 0.5){
		vec3 paint_tex_hsv = rgb2hsv(paint_tex.rgb);
		paint_tex_hsv.x += paint_hue;
		paint_tex_hsv.y *= paint_saturation;
		paint_tex_hsv.z += paint_brightness;
		ALBEDO = hsv2rgb(paint_tex_hsv);
	} else {
		vec3 albedo_tex_hsv = rgb2hsv(albedo_tex.rgb);
		albedo_tex_hsv.z += base_brightness;
		ALBEDO = hsv2rgb(albedo_tex_hsv);
	}
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	
	vec3 base_emission_hsv = rgb2hsv(texture(texture_base_emission,base_uv).rgb);
	base_emission_hsv.x += lights_hue;
	base_emission_hsv.y *= lights_saturation;
	base_emission_hsv.z *= lights_brightness;
	vec3 base_emission_tex = hsv2rgb(base_emission_hsv);
	vec3 weapon_emission_hsv = rgb2hsv(texture(texture_weapon_emission,base_uv).rgb);
	weapon_emission_hsv.x += weapon_hue;
	weapon_emission_hsv.y *= weapon_saturation;
	vec3 weapon_emission_tex = hsv2rgb(weapon_emission_hsv);
	
	vec3 engine_emission_tex = texture(texture_engine_emission,base_uv).rgb;
	
	
	EMISSION = (
		emission.rgb+
		base_emission_tex * base_emission_factor +
		weapon_emission_tex * weapon_emission_factor +
		engine_emission_tex * engine_emission_factor
	)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 0, 0, 1, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/xform = Transform3D( -0.707107, 0, -0.707107, -0.5, 0.707107, 0.5, 0.5, 0.707107, -0.5, 0, 0, 0 )
shader_param/inv_xform = Transform3D( -0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, 0.5, -0.5, 0, 0, 0 )
shader_param/perspective_correct = 0.5
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 6.0
shader_param/base_emission_factor = 1.0
shader_param/engine_emission_factor = 0.0
shader_param/weapon_emission_factor = 0.0
shader_param/paint_hue = 0.71
shader_param/paint_saturation = 1.0
shader_param/paint_brightness = 0.04
shader_param/base_brightness = -0.12
shader_param/lights_hue = 0.32
shader_param/lights_saturation = 1.0
shader_param/lights_brightness = 1.0
shader_param/weapon_hue = 0.075
shader_param/weapon_saturation = 1.74
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_metallic = ExtResource( 4 )
shader_param/texture_roughness = ExtResource( 4 )
shader_param/texture_normal = ExtResource( 10 )
shader_param/texture_base_emission = ExtResource( 11 )
shader_param/texture_engine_emission = ExtResource( 13 )
shader_param/texture_weapon_emission = ExtResource( 12 )
shader_param/texture_paint = ExtResource( 8 )

[node name="Spaceship" type="CharacterBody3D"]
collision_layer = 2
collision_mask = 2
script = ExtResource( 2 )

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource( 1 )

[node name="Weapon" parent="." instance=ExtResource( 5 )]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.952441, 0, 0 )

[node name="Controller" parent="." instance=ExtResource( 3 )]

[node name="Graphics" type="MeshInstance3D" parent="."]
transform = Transform3D( -1, 0, -1.50996e-07, 0, 1, 0, 1.50996e-07, 0, -1, 0, 0, 0 )
mesh = ExtResource( 7 )
skeleton = NodePath("../..")
material/0 = SubResource( 3 )
script = ExtResource( 6 )

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Graphics"]
script = ExtResource( 9 )
