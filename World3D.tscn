[gd_scene load_steps=8 format=3 uid="uid://dgrskffsd1l7k"]

[ext_resource type="Script" path="res://Camera.gd" id="1_2by11"]
[ext_resource type="PackedScene" uid="uid://cijdnx2y3v7o2" path="res://Spaceship.tscn" id="2_5wpno"]
[ext_resource type="Texture2D" uid="uid://ba6y6bvt56q4k" path="res://assets/ScreamingBrain/Blue Nebula/1024x1024 Blue Nebula 1.png" id="3_kxeph"]
[ext_resource type="Script" path="res://BackgroundHack.gd" id="4_rqqeh"]

[sub_resource type="Shader" id="Shader_xiwc0"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.beta3's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;


uniform vec2 position;
const int LAYERS = 5;
const float DEPTH_FACTOR = 0.7;
const float DEPTH_OFFSET = 0.0;

void fragment(){
	ALBEDO = vec3(0,0,0);
	vec2 shifted_uv_front = UV;
	for (int i = 1; i <= LAYERS; i ++){
		
		// Offset stars by player position
		vec2 shifted_uv = UV;
		shifted_uv.x += (
			position.x / (DEPTH_OFFSET + float(i) / DEPTH_FACTOR)
		);
		shifted_uv.y += (
			position.y / (DEPTH_OFFSET + float(i) / DEPTH_FACTOR)
		);

		// Extra offset to avoid stacking
		shifted_uv += float(i) * 250.0;

		shifted_uv.x = fract(shifted_uv.x);
		shifted_uv.y = fract(shifted_uv.y);
		
		// Invert every other layer
		if(bool(i % 2)){
			shifted_uv.x = 1.0 - shifted_uv.x;
			shifted_uv.y = 1.0 - shifted_uv.y;
		}
		if(bool(i % 3)){
			if (shifted_uv.x > 1.0 || shifted_uv.y < 0.0 || shifted_uv.y > 1.0 || shifted_uv.y < 0.0){
				//COLOR = vec4(1,1,1,1)
			}
			ALBEDO += (texture(texture_albedo, shifted_uv) / (float(i) + 0.5)).rgb;
		} else {
			ALBEDO += (texture(texture_albedo, shifted_uv) / (float(i) + 0.5)).rgb;
		}
	}
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ap2qu"]
render_priority = 0
shader = SubResource("Shader_xiwc0")
shader_parameter/position = null
shader_parameter/texture_albedo = ExtResource("3_kxeph")

[sub_resource type="QuadMesh" id="QuadMesh_l5ydf"]
material = SubResource("ShaderMaterial_ap2qu")
size = Vector2(20, 20)

[node name="World3D" type="Node3D"]

[node name="CameraTransform" type="Node3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="CameraTransform"]
transform = Transform3D(0.707107, 0.5, -0.5, 0, 0.707107, 0.707107, 0.707107, -0.5, 0.5, -4.5, 6, 4.5)
projection = 1
size = 9.82505
near = 0.01
far = 500.0
script = ExtResource("1_2by11")

[node name="RemoteTransform3D" type="RemoteTransform3D" parent="CameraTransform/Camera3D"]
remote_path = NodePath("../../../BackgroundOffset")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0)
light_energy = 0.5

[node name="BackgroundOffset" type="Node3D" parent="."]
transform = Transform3D(0.707107, 0.5, -0.5, 0, 0.707107, 0.707107, 0.707107, -0.5, 0.5, -4.5, 6, 4.5)

[node name="BackgroundHack" type="MeshInstance3D" parent="BackgroundOffset"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -20)
mesh = SubResource("QuadMesh_l5ydf")
skeleton = NodePath("../..")
script = ExtResource("4_rqqeh")

[node name="projectiles" type="Node3D" parent="."]

[node name="players" type="Node3D" parent="."]

[node name="Spaceship" parent="players" instance=ExtResource("2_5wpno")]

[node name="npcs" type="Node3D" parent="."]

[node name="asteroids" type="Node3D" parent="."]
