[gd_resource type="ShaderMaterial" load_steps=9 format=2]

[ext_resource path="res://assets/nimbus/nimbus_C.png" type="Texture2D" id=1]
[ext_resource path="res://assets/nimbus/nimbus_RM.png" type="Texture2D" id=2]
[ext_resource path="res://assets/nimbus/nimbus_N.png" type="Texture2D" id=3]
[ext_resource path="res://assets/nimbus/nimbus_E_base.png" type="Texture2D" id=4]
[ext_resource path="res://assets/nimbus/nimbus_E_engine.png" type="Texture2D" id=5]
[ext_resource path="res://assets/nimbus/nimbus_E_weapon.png" type="Texture2D" id=6]
[ext_resource path="res://assets/nimbus/nimbus_C_paint.png" type="Texture2D" id=7]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.stable's StandardMaterial3D.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform mat4 xform;
uniform mat4 inv_xform;
uniform float perspective_correct = 0.5;

uniform sampler2D texture_base_emission : hint_default_black;
uniform sampler2D texture_engine_emission : hint_default_black;
uniform sampler2D texture_weapon_emission : hint_default_black;

uniform vec4 emission : source_color;
uniform float emission_energy;

uniform float base_emission_factor = 1;
uniform float engine_emission_factor = 1;
uniform float weapon_emission_factor=  1;

uniform sampler2D texture_paint : hint_default_black;

uniform float paint_hue: hint_range(0,1);
uniform float paint_saturation: hint_range(0,2);
uniform float paint_brightness: hint_range(-1,1);
uniform float base_brightness: hint_range(-1,1);

uniform float lights_hue: hint_range(0,1);
uniform float lights_saturation: hint_range(0,2);
uniform float lights_brightness: hint_range(0,2);
uniform float weapon_hue: hint_range(0,1);
uniform float weapon_saturation: hint_range(0,2);


// https://gamedev.stackexchange.com/a/59808
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void vertex() {
	//https://discord.com/channels/212250894228652034/408555922349359105/988915027035693186
	
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	mat4 reflection = mat4(
		vec4(-1, 0, 0, 0),
		vec4(0, 1, 0, 0),
		vec4(0, 0, -1, 0),
		vec4(0, 0, 0, 1)
	);
	
	mat4 projection = mat4(
		vec4(1,0,0,0),
		vec4(0,1,0,0),
		vec4(0,0,1,-perspective_correct),
		vec4(0,0,0,1)
	);
	vec4 tmpvertex = vec4(VERTEX, 1);
	
	tmpvertex = 
		inv_xform *
		projection *
		xform *
		reflection *
		tmpvertex;
	
	VERTEX = tmpvertex.xyz / tmpvertex.w;
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	vec4 paint_tex = texture(texture_paint,base_uv);
	if (paint_tex.a > 0.5){
		vec3 paint_tex_hsv = rgb2hsv(paint_tex.rgb);
		paint_tex_hsv.x += paint_hue;
		paint_tex_hsv.y *= paint_saturation;
		paint_tex_hsv.z += paint_brightness;
		ALBEDO = hsv2rgb(paint_tex_hsv);
	} else {
		vec3 albedo_tex_hsv = rgb2hsv(albedo_tex.rgb);
		albedo_tex_hsv.z += base_brightness;
		ALBEDO = hsv2rgb(albedo_tex_hsv);
	}
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	
	vec3 base_emission_hsv = rgb2hsv(texture(texture_base_emission,base_uv).rgb);
	base_emission_hsv.x += lights_hue;
	base_emission_hsv.y *= lights_saturation;
	base_emission_hsv.z *= lights_brightness;
	vec3 base_emission_tex = hsv2rgb(base_emission_hsv);
	vec3 weapon_emission_hsv = rgb2hsv(texture(texture_weapon_emission,base_uv).rgb);
	weapon_emission_hsv.x += weapon_hue;
	weapon_emission_hsv.y *= weapon_saturation;
	vec3 weapon_emission_tex = hsv2rgb(weapon_emission_hsv);
	
	vec3 engine_emission_tex = texture(texture_engine_emission,base_uv).rgb;
	
	
	EMISSION = (
		emission.rgb+
		base_emission_tex * base_emission_factor +
		weapon_emission_tex * weapon_emission_factor +
		engine_emission_tex * engine_emission_factor
	)*emission_energy;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 0, 0, 1, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/xform = Transform3D( -0.707107, 0, -0.707107, -0.5, 0.707107, 0.5, 0.5, 0.707107, -0.5, 0, 0, 0 )
shader_param/inv_xform = Transform3D( -0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, 0.5, -0.5, 0, 0, 0 )
shader_param/perspective_correct = 0.5
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 6.0
shader_param/base_emission_factor = 1.0
shader_param/engine_emission_factor = 0.0
shader_param/weapon_emission_factor = 0.0
shader_param/paint_hue = 0.71
shader_param/paint_saturation = 1.0
shader_param/paint_brightness = 0.04
shader_param/base_brightness = -0.12
shader_param/lights_hue = 0.32
shader_param/lights_saturation = 1.0
shader_param/lights_brightness = 1.0
shader_param/weapon_hue = 0.075
shader_param/weapon_saturation = 1.74
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_metallic = ExtResource( 2 )
shader_param/texture_roughness = ExtResource( 2 )
shader_param/texture_normal = ExtResource( 3 )
shader_param/texture_base_emission = ExtResource( 4 )
shader_param/texture_engine_emission = ExtResource( 5 )
shader_param/texture_weapon_emission = ExtResource( 6 )
shader_param/texture_paint = ExtResource( 7 )
